datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String  @id @default(uuid())
  username       String  @unique
  imageUrl       String  @db.Text
  externalUserId String  @unique
  firstName      String? @db.Text
  lastName       String? @db.Text
  tokens         Int     @default(0)

  // Relationships
  following  Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")
  blocking   Block[]  @relation("Blocking")
  blockedBy  Block[]  @relation("BlockedBy")
  stream     Stream?
  profile    Profile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id     String  @id @default(uuid())
  userId String  @unique
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio    String? @db.Text

  age        Int
  location   String  @db.Text
  preference String? @db.Text
  gender     String
  socials    Json? 
  photos     Json?
  videos     Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id           String  @id @default(uuid())
  name         String  @db.Text
  thumbnailUrl String? @db.Text
  goalText     String? @db.Text

  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  // Stream settings
  isLive              Boolean @default(false)
  isChatEnabled       Boolean @default(true)
  isChatDelayed       Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)
  isPublic            Boolean @default(true) // Indicates public/private streams

  // Relationships
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])
  @@fulltext([name])
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  // Relationships
  follower  User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String @id @default(uuid())
  blockerId String
  blockedId String

  // Relationships
  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}
