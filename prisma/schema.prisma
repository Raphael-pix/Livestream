datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  username       String   @unique
  imageUrl       String
  externalUserId String   @unique
  firstName      String?
  lastName       String?
  currentTokens  Int      @default(0)

  following  Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")
  blocking   Block[]  @relation("Blocking")
  blockedBy  Block[]  @relation("BlockedBy")
  stream     Stream?
  profile    Profile?
  tokens     Tokens[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio    String?

  age        Int
  location   String
  preference String?
  gender     String
  socials    Json?
  photos     Json?
  videos     Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  thumbnailUrl String?
  goalText     String?
  type         String?

  ingressId String? @unique
  serverUrl String?
  streamKey String?

  isLive              Boolean @default(false)
  isChatEnabled       Boolean @default(true)
  isChatDelayed       Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)
  isPublic            Boolean @default(true)

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String @db.ObjectId
  followingId String @db.ObjectId

  follower  User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
}

model Block {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  blockerId String @db.ObjectId
  blockedId String @db.ObjectId

  blocker User @relation("Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation("BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([blockerId, blockedId])
}

model Tokens {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String  @db.ObjectId
  stripeId String? @unique
  amount   Float?  @default(0)
  plan     String?
  credits  Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, stripeId])
}